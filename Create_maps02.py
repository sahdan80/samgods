# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Create_maps02.py
# Created on: 2024-04-21 13:24:18.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# Author: Gabriella Sala
# ArcGis version: 10.6
# ---------------------------------------------------------------------------
#############################################################################
#import required modules
#############################################################################

import sys
import traceback
import arcpy
import os
import string
import shutil
import time



####################################################################
#                        GENERAL VARIABLES                         #
####################################################################
## user input
#HED main_path = ( r"C:\Models\Samgods_BK\Cube\Samgods_V123")
main_path = ( r"C:\Samgods\Samgods_V122_240423")
#main_path = ( r"e:\S12\G2404")
arcpy.env.workspace = main_path
workspace           = main_path
Year                = "2045"
Scenario_Name       = "UA_0_kv_3"
#Year                = "2019"
#Scenario_Name       = "Base2019"
arcpy.env.qualifiedFieldNames = False

###################functions########################################
def fieldnames (dataset, sep=",", filter="*", fields_type="All"):
#""" Return Str of fields in a feature class, shapefile, or table
#in a specified dataset. The returned str can be limited with
#search criteria for name and field type and will contain field objects."""
    return sep.join(list([f.name for f in arcpy.ListFields(dataset, filter, fields_type)]))
###################functions########################################
   
print("testart")
#starting from here#################################################

try:
    #Timing
    start = time.time()
    print("hello","  ",start)
    bYEARinPATH = True

    #Concatenate variables

    #create folder and move required files
    if bYEARinPATH:
        FolderCreation= workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + "MainSc2045\\" + Scenario_Name + "\\ABS+DIFF_GIS" + Scenario_Name
        
    else:
        FolderCreation= workspace + "\\Scenario_Tree\\" + Scenario_Name + "\\ABS+DIFF_GIS" + Scenario_Name

    if os.path.exists(FolderCreation):
        print("Path already exists")

    else:
        os.mkdir(FolderCreation)
        print(FolderCreation)
    print(FolderCreation)
    bSTD = False

    if bSTD:
        map_set = ['COM_STD_GIS_TON.mxd', 'COM_STD_GIS_VHCL.mxd', 'COM_RCM_GIS_TON.mxd', 'COM_RCM_GIS_VHCL.mxd']
    else:
        map_set = ['COM_RCM_GIS_TON.mxd', 'COM_RCM_GIS_VHCL.mxd']


    for mapN in map_set:
        Map_Template =  workspace + "\\03_GIS_Data\\Output_Template_" + Year +"_"+ mapN
        if bYEARinPATH:
            MapName =  workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + "MainSc2045\\" + Scenario_Name + "\\ABS+DIFF_GIS" + Scenario_Name +"\\Output_"+ mapN
        else:
            MapName =  workspace + "\\Scenario_Tree\\" + Scenario_Name + "\\ABS+DIFF_GIS" + Scenario_Name +"\\Output_"+ mapN
        shutil.copy(Map_Template,MapName)

    
    #file checks
    print(FolderCreation)
    myfile=file(FolderCreation+"\\report1.txt",'w')

    #New gdb file names
    Final_gdb =  "Geodatabase" + Year + "_COM.gdb"

    #create gdb
    if arcpy.Exists(FolderCreation + "\\"+ Final_gdb):
        print("geodatabase already exists")
    else:
        arcpy.management.CreateFileGDB(FolderCreation, Final_gdb , "10.0")

    Table_STDo = ""
    Table_STD = ""
    Temp_Layer_STD = ""

    if bYEARinPATH:
        Network_Layer  = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\Output0_" + Scenario_Name + ".mdb\\Loaded_Net_0_Link"
    else:
        Network_Layer  = workspace + "\\Scenario_Tree\\"+ Scenario_Name+"\\Output0_" + Scenario_Name + ".mdb\\Loaded_Net_0_Link"
    Temp_Layer     = FolderCreation+ "\\" + Final_gdb + "\\TEMP_LAYER"
    if bSTD : Temp_Layer_STD = FolderCreation+ "\\" + Final_gdb + "\\TEMP_LAYER_STD"
    Temp_Layer_XTD = FolderCreation+ "\\" + Final_gdb + "\\TEMP_LAYER_XTD"
    if bSTD :
        Table_STDo = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_LPX.dat"
        Table_STD  = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_LPX.txt"

    #if bYEARinPATH:
    #    Table_XTDo = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_G2019_COMBINE.dat"
    #    Table_XTD  = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_G2019_COMBINE.txt"
    
    if bYEARinPATH:
        Table_XTDo = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_XTD.dat"
        Table_XTD  = workspace + "\\Scenario_Tree\\Year_" +Year+"\\"+ "MainSc2045\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_XTD.txt"
    
    else:
        Table_XTDo = workspace + "\\Scenario_Tree\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_XTD.dat"
        Table_XTD  = workspace + "\\Scenario_Tree\\"+ Scenario_Name+"\\LogMod\\RCM\\output\\Commodity_XTD.txt"
    # Trying Samgods_Daniel UA_1_kv. Does not seem to work
        #spec_workspace = ( r"f:\S12\Samgods_Daniel")
        #Table_XTDo = spec_workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + "UA_1_kv" + "\\LogMod\\RCM\\output\\Commodity_G2045_COMBINE.dat"
        #Table_XTD = spec_workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + "UA_1_kv" + "\\LogMod\\RCM\\output\\Commodity_G2045_COMBINE.txt"
    if bSTD:
        Temp_STD= FolderCreation + "\\"+ Final_gdb + "\\Temp_STD"
    Temp_XTD= FolderCreation + "\\"+  Final_gdb + "\\Temp_XTD"
    if bSTD:
        Final_STD = FolderCreation+ "\\"+ Final_gdb + "\\Loaded_Bid_STD_Link"
    Final_XTD = FolderCreation+ "\\"+  Final_gdb + "\\Loaded_Bid_RCM_Link"



    if os.path.exists(Table_STD):
       #os.rename(Table_STD, Table_STDo)
       #os.rename(Table_XTD, Table_XTDo)
        arcpy.GetMessages(0)
    else:
        if bSTD:
            os.rename(Table_STDo, Table_STD)
        if os.path.exists(Table_XTDo):
            os.rename(Table_XTDo, Table_XTD)

    print(arcpy.GetMessages(0))  #0 - all messages
    
    

    #prepare feature class with main attributes from voyager network
    arcpy.env.overwriteOutput = 1
    arcpy.management.MakeFeatureLayer(Network_Layer, Temp_Layer, "","","A; B; TRAKBANDEL; CATEGORY; MODE_L; ID_COUNTRY; UL2")
    
    # Process: Add Field
    arcpy.management.AddField(Temp_Layer, "KEYLINK", "DOUBLE", "", "", "", "", "", "REQUIRED", "")
    
    # Process: Calculate Field
    arcpy.management.CalculateField(Temp_Layer, "KEYLINK", "!A!*100000+!B!", "PYTHON", "")
    if bSTD: arcpy.management.MakeFeatureLayer(Temp_Layer, Temp_Layer_STD)
    arcpy.management.MakeFeatureLayer(Temp_Layer, Temp_Layer_XTD)

    
    print(arcpy.GetMessages(0)) #0 - all messages



    if bSTD:
        ###########################
        #STD Table
        ###########################
        # Process: Copy Rows
        arcpy.management.CopyRows(Table_STD, Temp_STD, "")

        #rename fields
        arcpy.management.AlterField(Temp_STD, 'CapUtil_', 'CAPUTIL', 'CapUtil_')
        arcpy.management.AlterField(Temp_STD, 'CapTrains_day', 'CAPTRDAY', 'CapTrains_day')
        arcpy.management.AlterField(Temp_STD, 'NLoadVhc','VOLTO','NLoadVhc')
        arcpy.management.AlterField(Temp_STD, 'NEmptyVhc','EMPTOE','NEmptyVhc')

        # Process: Add Field in Table
        arcpy.management.AddField(Temp_STD, "KEYLINK", "DOUBLE", "", "", "", "", "", "NON_REQUIRED", "")
        arcpy.management.AddField(Temp_STD, "TOTV", "DOUBLE", "", "", "", "", "", "NON_REQUIRED", "")

        # Process: Calculate Field
        arcpy.management.CalculateField(Temp_STD, "KEYLINK", "!A!*100000+!B!", "PYTHON", "")
        arcpy.management.AddIndex(Temp_STD, "KEYLINK", "KEYLINK", "UNIQUE", "ASCENDING")
        arcpy.management.CalculateField(Temp_STD, "TOTV", "!VOLTO!+!EMPTOE!", "PYTHON", "")

         # Process: Join tables
        arcpy.management.AddJoin(Temp_Layer_STD, "KEYLINK", Temp_STD, "KEYLINK", "KEEP_COMMON")



        # Process: Save in main database
        arcpy.management.CopyFeatures(Temp_Layer_STD, Final_STD)

        arcpy.management.DeleteField(Final_STD,"A_1")
        arcpy.management.DeleteField(Final_STD,"B_1")
        arcpy.management.DeleteField(Final_STD,"OBJECTID_1")
        arcpy.management.DeleteField(Final_STD,"KEYLINK_1")

        # HED...S
        VS = ["LGV3", "MGV16", "MGV24", "HGV40", "HGV60", "HGV74", "KOMBI", "FEEDW", "FEEDV", "FS_TRAIN", "SYS22",
              "SYS25", "SYS30", "WG550", "WG750", "WG950", "KOMXL", "SYSXL", "WGEXL",
              "CV5", "CV16", "CV27", "CV100", "OV1", "OV2", "OV3", "OV5", "OV10", "OV20", "OV40", "OV80", "OV100",
              "OV250", "RO3", "RO6", "RO10", "ROF2", "ROF5", "ROF7", "RAF5", "INW", "FLYG"]
        for k in range(len(VS)):
            for i in range(3):
                if i == 0:
                    strV = VS[k]
                elif i == 1:
                    strV = VS[k]+"E"
                else:
                    strV = VS[k]+"T"
                arcpy.management.DeleteField(Final_STD, strV)

        # HED...E

        print(arcpy.GetMessages(0)) #0 - all messages


    ###########################
    #XTD Table
    ###########################
    # Process: Copy Rows
    arcpy.CopyRows_management(Table_XTD, Temp_XTD, "")

    #rename fields
    arcpy.management.AlterField(Temp_XTD, 'CapUtil_', 'CAPUTIL', 'CapUtil_')
    arcpy.management.AlterField(Temp_XTD, 'CapTrains_day', 'CAPTRDAY', 'CapTrains_day')
    arcpy.management.AlterField(Temp_XTD,'NLoadVhc','VOLTO','NLoadVhc')
    arcpy.management.AlterField(Temp_XTD,'NEmptyVhc','EMPTOE','NEmptyVhc')
   #HED
    arcpy.management.AlterField(Temp_XTD, 'kTon', 'KTONTO', 'kTon')

    # Process: Add Field in Table
    arcpy.management.AddField(Temp_XTD, "KEYLINK", "DOUBLE", "", "", "", "", "", "NON_REQUIRED", "")
    arcpy.management.AddField(Temp_XTD, "TOTV", "DOUBLE", "", "", "", "", "", "NON_REQUIRED", "")

    # Process: Calculate Field
    arcpy.management.CalculateField(Temp_XTD, "KEYLINK", "!A!*100000+!B!", "PYTHON", "")
    arcpy.management.AddIndex(Temp_XTD,"KEYLINK", "KEYLINK", "UNIQUE", "ASCENDING")
    arcpy.management.CalculateField(Temp_XTD, "TOTV", "!VOLTO!+!EMPTOE!", "PYTHON", "")
    
    # Process: Join tables
    arcpy.management.AddJoin(Temp_Layer_XTD, "KEYLINK", Temp_XTD, "KEYLINK","KEEP_COMMON")
   # Process: Save in main gdb for maps
    arcpy.management.CopyFeatures(Temp_Layer_XTD,Final_XTD )

    arcpy.management.DeleteField(Final_XTD,"A_1")
    arcpy.management.DeleteField(Final_XTD,"B_1")
    arcpy.management.DeleteField(Final_XTD,"OBJECTID_1")
    arcpy.management.DeleteField(Final_XTD,"KEYLINK_1")

#HED...S

    #	OBJECTID *	935	936	937
    #	A	721	722	723
    #	B	29029	29039	29057
    #	CAPUTIL	0	0	0
    #	VOLTO	3153.779541	3884.029297	0               <<<<<<
    #	EMPTOE	29.44	24.926	0
    #	CATEGORY	610	610	701
    #	MODE_L	1	1	1
    #	ID_COUNTRY	501	501	501
    #	KEYLINK	72129029	72229039	72329057
    #	EMMEFR	963400	963500	963511
    #	EMMETO	600065	600035	501399
    #	TOTV	71.389	66.991	0               OK!
    #	UL2	17.34	17.71	8.61
    #	TRAKBANDEL	0	0	0
    #	CAPTRDAY	0	0	0
    #	SPEED_1	50	50	50
    #	SPEED_2	50	50	50
    #	FUNCTION	81	81	81
    #	EMPTO	5074.653809	4250.191406	0               <<<<<<
    #	TONTO	59510.55859	89702.03125	0               <<<<<<
    #	TOT_ROAD	3153.779541	3884.029297	0               <<<<<<
    #	TOT_ROAD_E	5074.653809	4250.191406	0               <<<<<<
    #	TOT_ROAD_T	59510.55859	89702.03125	0               <<<<<<
    #	TOT_RAIL	0	0	0               <<<<<<
    #	TOT_RAIL_E	0	0	0               <<<<<<
    #	TOT_RAIL_T	0	0	0               <<<<<<
    #	TOT_SEA	0	0	0               <<<<<<
    #	TOT_SEA_E	0	0	0               <<<<<<
    #	TOT_SEA_T	0	0	0               <<<<<<
    #	GEOMETRYSOURCE	1	1	1
    #	ORIGINALCAP	0	0	0
    #	kTon	199.987	258.591	0
    #	NLoadVhc	41.949	42.065	0
    #	km	17.34	17.71	8.61
    #	LinkType	610	610	701
    #	ModeNbr	1	1	1
    #	PortArea	0	0	0
    #	LTSton	0	0	0
    #	LTStag	0	0	0
    #	kTonAlt	199.987	258.687	0
    #	VehTotAlt	71.392	67.026	0
    #	UCapAlt	-1	-1	-1
    #	kTonDA_J	0	0.1	0
    #	out
    #	Shape *	Polyline	Polyline	Polyline
    #	P01_KTON	54	5	0
    #	P02_KTON	0	0	0
    #	P03_KTON	0	65	0
    #	P04_KTON	2	0	0
    #	P05_KTON	2	1	0
    #	P06_KTON	61	8	0
    #	P07_KTON	0	24	0
    #	P08_KTON	49	80	0
    #	P09_KTON	0	7	0
    #	P10_KTON	12	19	0
    #	P11_KTON	2	1	0
    #	P12_KTON	4	0	0
    #	P13_KTON	0	39	0
    #	P14_KTON	15	7	0
    #	P15_KTON	0	2	0
    #	P16_KTON	0	0	0
    #	P01_VDAY	10.9994	1.0088	0
    #	P02_VDAY	0	0	0
    #	P03_VDAY	0	6.3645	0
    #	P04_VDAY	0.4519	0.0222	0
    #	P05_VDAY	0.604	0.2929	0
    #	P06_VDAY	12.1304	1.9396	0
    #	P07_VDAY	0	2.8625	0
    #	P08_VDAY	10.9216	14.2406	0
    #	P09_VDAY	0.1143	0.993	0
    #	P10_VDAY	2.7442	4.3005	0
    #	P11_VDAY	0.4513	0.3499	0
    #	P12_VDAY	0.9922	0.1294	0
    #	P13_VDAY	0.0046	7.9186	0
    #	P14_VDAY	2.512	1.0873	0
    #	P15_VDAY	0	0.5416	0
    #	P16_VDAY	0.0231	0.0131	0
    #	Shape_Length	17342.70164	17700.51412	7825.458453

    VF = ["NLANES", "CLOSED", "SWEDEN", "MODESTR", "UL3", "CLOSE_", "DISTANCE", "PHF_", "VOLTO", "EMPTO", "TONTO"]

    for k in range(len(VF)):
        print("FIELD ",k,VF[k])
        arcpy.management.DeleteField(Final_XTD, VF[k])

    VS = ["LGV3", "MGV16", "MGV24", "HGV40", "HGV60", "HGV74", "KOMBI", "FEEDW", "FEEDV", "FS_TRAIN", "SYS22", "SYS25", "SYS30", "WG550", "WG750", "WG950", "KOMXL", "SYSXL", "WGEXL",
        "CV5", "CV16", "CV27", "CV100","OV1", "OV2", "OV3", "OV5", "OV10", "OV20", "OV40", "OV80", "OV100", "OV250", "RO3", "RO6", "RO10", "ROF2", "ROF5", "ROF7", "RAF5", "INW", "FLYG",
          "TOT_ROAD", "TOT_RAIL_", "TOT_SEA_"]
    for k in range(len(VS)):
        for i in range(3):
            if i == 0:
                strV = VS[k]
            elif i == 1:
                strV = VS[k]+"E"
            else:
                strV = VS[k]+"T"
            arcpy.management.DeleteField(Final_XTD, strV)

    # HED...E

    #List of field names
    if bSTD: fieldnames(Final_STD, filter="*")
    #print>>myfile,fieldnames(Final_XTD, filter="*")
    fieldnames(Final_XTD, filter="*")    
    #print>>myfile,fieldnames(Final_XTD, filter="*")

    if bSTD: arcpy.management.Delete(Temp_STD)
    arcpy.management.Delete(Temp_XTD)
    
    print(arcpy.GetMessages(0)) #0 - all messages
    

    #Rename files for tables
    if bSTD: os.rename(Table_STD, Table_STDo)
    os.rename(Table_XTD, Table_XTDo)

    ###########################
    #Rename layers in main GDB
    ###########################

    for mapN in map_set:
        Map_Template =  workspace + "\\03_GIS_Data\\Output_Template_" + Year +"_"+ mapN
#HED        MapName =  workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + Scenario_Name + "\\ABS_GIS" + Scenario_Name +"\\Output_" + mapN
        MapName = workspace + "\\Scenario_Tree\\" + Scenario_Name + "\\ABS_GIS" + Scenario_Name + "\\Output_" + mapN
        if arcpy.Exists(MapName):
            print ("mxd already exists")
        else:
            shutil.copy(Map_Template,MapName)
#HED        MapName =  workspace + "\\Scenario_Tree\\Year_" + Year + "\\" + Scenario_Name + "\\ABS_GIS" + Scenario_Name +"\\Output_"+ mapN
        MapName =  workspace + "\\Scenario_Tree\\" + Scenario_Name + "\\ABS_GIS" + Scenario_Name +"\\Output_"+ mapN
        mxd = arcpy.mapping.MapDocument(MapName)
        #print>>myfile,MapName
        df = arcpy.mapping.ListDataFrames(mxd, '')[0]

        #output which layers are on / off
        for lyr_list in arcpy.mapping.ListLayers(mxd):
            #print lyr_list.name, lyr_list.visible

            if lyr_list.name == "ScenarioName" :
                #print "Find!!"
                lyr_list.name = Scenario_Name
                print(lyr_list.name) 
       #Refresh Table of Contents
        mxd.save()
                

    
except arcpy.ExecuteError:
    # Get the geoprocessing error messages
    #
    msgs = arcpy.GetMessage(0)
    msgs += arcpy.GetMessages(2)

    # Return gp error messages for use with a script tool
    #
    arcpy.AddError(msgs)

    # Print gp error messages for use in Python/PythonWin
    #
    print>>myfile,msgs
    
    
except:
    # Get the traceback object
    #
    tb = sys.exc_info()[2]
    tbinfo = traceback.format_tb(tb)[0]

    # Concatenate information together concerning the error into a 
    #   message string
    #
    pymsg = tbinfo + "\n" + str(sys.exc_type)+ ": " + str(sys.exc_value)

    # Return python error messages for use with a script tool
    #
    arcpy.AddError(pymsg)

    # Print Python error messages for use in Python/PythonWin
    #
    print>>myfile,pymsg
print(Final_gdb)
#arcpy.management.Compact(Final_gdb) 
arcpy.management.Compact(FolderCreation + "\\"+ Final_gdb)
myfile.close

end = time.time()
print("Total CPU-time= ",end - start)

print(arcpy.GetMessages()) 
